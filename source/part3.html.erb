---
  title: Viikko 3
  exercise_page: true
  quiz_page: false
---

<% partial 'partials/material_heading' do %>
  Kolmannen viikon tehtävät
<% end %>

<p>
    Pythonissa jakojäännöksen selvittäminen onnistuu helpoiten modulo-operaattorilla. Modulo-operaattoria merkitään Pythonissa %-merkillä. Modulo-operaattori palauttaa suoraan jakojäännöksen.
  </p>

  <p>
Esimerkiksi 6%2 palauttaa 0.
  </p>
  <p>
Esimerkiksi 7%2 palauttaa 1.
  </p>

<% partial 'partials/exercise', locals: { name: 'Odd or even?' } do %>

  <p>
    Tee ohjelma, missä kysyt käyttäjältä luvun. <br>
    Tämän jälkeen ohjelma tulostaa oliko luku parillinen vai pariton.
  </p>

  <% partial 'partials/sample_output' do %>
Give a number to check 333
Number 333 is odd.
  <% end %>

  <% partial 'partials/sample_output' do %>
Give a number to check 222
Number 222 is even.
  <% end %>

<% end %>



<p>
Pythonissa on for-loopin lisäksi käytössä myös mm. while-loop. While loop toimii periaatteessa samalla tavalla kuin for, mutta se jatkaa toistoa niin kauan kuin sille määritelty ehto on totta. Puhutaan ns. "Condition-Controlled" ja "Collection-Controlled" loopeista.
</p>

<p>
Kokeillaa esimerkiksi seuraavaa koodia:
</p>

<% partial 'partials/code_highlight' do %>
n = 100
s = 0
luku = 1

while luku <= n:
    s = s + luku
    luku += 1

print("Summa välillä 1 - %d on %d" % (n,s))
  <% end %>

<p>
Ylläoleva ohjelma tulostaa seuraavan:
</p>


<% partial 'partials/sample_output' do %>
Summa välillä 1 - 100 on 5050
<% end %>

<p>
Ohjelmointitehtävissä törmää myös usein ongelmiin, joissa muuttujan on täytettävä tietty ehto jotta jotain tapahtuu. Näitä kutsutaan if-lauseiksi. Python3:ssa if-lauseiden runko on seuraava:
</p>

<% partial 'partials/code_highlight' do %>
    if condition :
      indentedStatementBlock
  <% end %>

<p>
Lisäksi usein if-lauseita "jatketaan" else rakenteella, joka toimii samalla tavalla.
</p>

<% partial 'partials/code_highlight' do %>

    if condition :
      indentedStatementBlockForTrueCondition
    else:
      indentedStatementBlockForFalseCondition

  <% end %>
<p>
Luennolla käydään läpi vertailuoperaattorit:
</p>

<ul>
  <li>
    yhtäsuuri ==
  </li>
  <li>
    pienempi <
  </li>
  <li>
    suurempi >
  </li>
  <li>
    suurempi tai yhtäsuuri >=
  </li>
  <li>
    pienempi tai yhtäsuuri <=
  </li>
  <li>
    erisuuri !=
  </li>
</ul>
<% partial 'partials/exercise', locals: { name: 'Looping' } do %>

<p>
Tehtäväpohja näyttää seuraavalta
</p>
  <% partial 'partials/code_highlight' do %>
  def main():
####################################################
    arvattava = 42
    arvaukset = 0
    arvaus = 0
####################################################
#############TEE TEHTÄVÄ TÄMÄN ALAPUOLELLE##########
  <% end %>

<p>
Tehtävänäsi on tehdä ohjelma joka lukee käyttäjältä arvauksen ja kertoo onko käyttäjän arvaama luku suurempi vai pienempi kuin arvattava luku. Lisäksi ohjelma laskee käyttäjän arvauksien määrän.
</p>

<% partial 'partials/sample_output' do %>
Arvaa luku 40
Lukuni on suurempi
Arvaa luku 44
Lukuni on pienempi
Arvaa luku 42
Arvasit oikein 3 arvauksella
<% end %>
<% end %>


<% partial 'partials/exercise', locals: { name: 'Random angle' } do %>

  <p>
    Tehtäväpohjassa on valmiiksi koodi joka arpoo ensin radiaaneja ja muuntaa sen tämän jälkeen kulmaksi. Kulmaluku voi siis olla yli yhden kierroksen. Tehtävänäsi on kirjoittaa valmiiksi annetun osuuden jälkeen koodi joka kertoo mihin yksikköympyrän neljännekseen arvottu kulma sijoittuu.
  </p>

  <% partial 'partials/sample_output' do %>
  Arvottu luku  0.33797175599533125
  on alueen (0,1) keskella
  Arvottu kulma = 337.97175599533125  astetta
  on 4. neljanneksessa
  <% end %>

 <% partial 'partials/sample_output' do %>
  Arvottu luku  0.09602578231894476
  on alueen (0,1) alussa
  Arvottu kulma = 96.02578231894476  astetta
  on 2. neljanneksessa
<% end %>

<% end %>


<p>
Vaikka Pythonissa on lukuisia kirjastoja, jotka tarjoavat valmiita ratkaisuja ongelmiin. Monissa tieteellisen laskennan ongelmissa joudutaan tekemään omia funktioita. Myöhemmin tällä kurssilla teemme esimerkiksi Rayleigh-testin datalle.
</p>

<p>
Pythonin funktiorakenne on yksinkertainen:
</p>

<% partial 'partials/code_highlight' do %>
def funktion_nimi(parametrit):
    funktionRakenneTänne
  <% end %>

<p>
Esimerkiksi funktio joka muuttaa Celsius-asteet Fahrenheiteiksi on seuraavanlainen:
</p>


<% partial 'partials/code_highlight' do %>
def fahrenheit(TCelsius):
    return (TCelsius * 9/5) + 32
  <% end %>

<p>
Mainissa fahrenheit-funktiota kutsuttaisiin esimerkiksi seuraavasti:
</p>

<% partial 'partials/code_highlight' do %>
def main():
    print(fahrenheit(12))
def fahrenheit(TCelsius):
    return (TCelsius * 9/5) + 32
  <% end %>

<p>
Huomaa että tehtäväpohjissa nähty main on siis oikeasti myös funktio joka sisältää pääohjelman!
</p>
  <p>
Funktion rakenne voi sisältää lähes mitä vain. Esimerkiksi for, while ja if-rakenteita.
</p>

<% partial 'partials/exercise', locals: { name: 'Factorial' } do %>

  <p>
    Main ohjelmarungossa on valmiiksi print(factorial(12)). Tehtäväsi on kirjoittaa factorial(n) funktio mikä laskee annetun luvun n kertoman ja palauttaa sen. Tulosta lopuksi mainissa oleva factorial(12).
  </p>

  <% partial 'partials/sample_output' do %>
  479001600
  <% end %>

<% end %>


<% partial 'partials/exercise', locals: { name: 'Exponential function' } do %>

  <p>
    Main ohjelmarungossa on valmiiksi print(exponential(1,100)). Tehtävänäsi on kirjoittaa funktio joka laskee e<sup>x</sup> funktion Taylorin sarjan arvon pisteessä x, n:n termin tarkkuudella. Mainissa oleva funktio kutsu siis tarkoittaa e<sup>1</sup> arvoa 100 termin tarkkuudella. Vinkki: käytä edellisessä tehtävässä luomaasi kertoma funktiota. Voit kutsua toista funktiota toisen sisällä aivan kuin kutsut sitä mainissakin.
  </p>

  <p>
  Taylorin sarja lasketaan e^x seuraavasti:
  <img src="https://raw.githubusercontent.com/materiaalit/tilai-18/master/source/maclaurin_ex03.gif" alt="e^x lauseke">
  </p>
  <% partial 'partials/sample_output' do %>
  2.7182818284590455
  <% end %>

<% end %>



